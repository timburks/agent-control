#!/usr/local/bin/nush
(load "AgentHTTP")
(load "AgentCrypto")
(load "AgentMongoDB")

;; control must run as root
(set whoami (NSString stringWithShellCommand:"whoami"))
(unless (eq whoami "root")
        (puts "controld must be run as root.")
        (exit -1))

(set CONTROL_PATH "/home/control")

;;
;; Password utilities
;;

(set PASSWORD_SALT "agent.io")

(class NSString
 (- (id) agent_md5HashWithSalt:(id) salt is
    (((self dataUsingEncoding:NSUTF8StringEncoding)
      agent_hmacMd5DataWithKey:(salt dataUsingEncoding:NSUTF8StringEncoding))
     agent_hexEncodedString)))

;;
;; MongoDB database helpers
;;

;; mongodb administration
;; > use admin
;; > db.addUser("root", "radtastical")
;; > use agentbox
;; > db.addUser("agentbox", "xme")
;;
;; run mongod with --auth option
;; (set HOSTINFO (dict host:"127.0.0.1" port:20101))
;; (mongo connectWithOptions:HOSTINFO)
;; (mongo authenticateUser:"agentbox" withPassword:"xme" forDatabase:SITE)

(macro mongo-connect ()
       `(progn (unless (defined mongo)
                       (set mongo (AgentMongoDB new))
                       (mongo connect))))

(def oid (string)
     ((AgentBSONObjectID alloc) initWithString:string))

;;
;; UPSTART configuration
;;

(def generate-upstart-config (CONTAINER NAME PORT APP) <<-END
#
# AUTOMATICALLY GENERATED 
#
start on runlevel [2345]
setuid control
chdir #{CONTROL_PATH}/workers/#{CONTAINER}/#{NAME}.app
env AGENT_DOMAINS='#{(APP domains:)}'
env AGENT_HOST='#{(NSString stringWithShellCommand:"hostname")}'
env AGENT_NAME='#{(APP name:)}'
env AGENT_PATH='#{(APP path:)}'
exec ./#{NAME} -p #{PORT}
respawn
respawn limit 10 90
END)

;;
;; NGINX configuration
;;

(def NGINX-CONF (apps)
     
     (if ((NSFileManager defaultManager) fileExistsAtPath:"#{CONTROL_PATH}/etc/agent.key")
         (then
              (set SSLCONFIG <<-END
        listen          443 ssl;
        ssl_certificate     #{CONTROL_PATH}/etc/agent.crt;
        ssl_certificate_key #{CONTROL_PATH}/etc/agent.key;
END))
         (else (set SSLCONFIG "")))
     
     <<-END
#
# Agent I/O nginx configuration
# this file was automatically generated
#
worker_processes  8;

events {
    worker_connections  1024;
}

http {
    log_format control '$msec|$time_local|$host|$request|$status|$bytes_sent|$request_time|$remote_addr|$http_referer|$http_user_agent|||';
    access_log #{CONTROL_PATH}/var/nginx-access.log control;
    error_log #{CONTROL_PATH}/var/nginx-error.log debug;

    large_client_header_buffers 4 32k;

    gzip on;
    gzip_proxied any;

    types_hash_bucket_size 64;
    types {
        application/x-mpegURL                   m3u8;
        video/MP2T                              ts;
        video/mp4                               mp4;
        application/xml                         xml;
        image/gif                               gif;
        image/jpeg                              jpg;
        image/png                               png;
        image/bmp                               bmp;
        image/x-icon                            ico;
        text/css                                css;
        text/html                               html;
        text/plain                              txt;
        application/pdf                         pdf;
        text/xml                                plist;
        application/octet-stream                dmg;
        application/octet-stream                ipa;
        application/octet-stream                mobileprovision;
        application/x-apple-aspen-config        mobileconfig;
    }
    default_type       text/html;

    server_names_hash_bucket_size 64;
    server_names_hash_max_size 8192;
#{(upstream-servers-for-apps apps)}

    server {
        listen          80;
#{SSLCONFIG}
        server_name     ~^(.*)$;
        root #{CONTROL_PATH}/public;
        try_files $uri.html $uri $uri/ =404;
        error_page 404  /404.html;
        error_page 403  /403.html;
        error_page 502  /502.html;
        location /control/ {
            proxy_set_header Host $host;
            proxy_pass  http://127.0.0.1:2010;
        }
#{(locations-for-apps apps)}
        client_max_body_size 10M;
    }
#{(servers-for-apps apps)}
}
END)

(def servers-for-apps (apps)
     (set RESULTS "")
     (apps each:
           (do (app)
               (if (and (app domains:) ((app domains:) length) (((app deployment:) workers:) count))
                   (then (set server-name (app domains:))
                         (RESULTS << <<-END

    server {
        listen          80;
        server_name     #{server-name};
        root #{CONTROL_PATH}/public;
        try_files $uri.html $uri $uri/ =404;
        error_page 404  /404.html;
        error_page 403  /403.html;
        error_page 502  /502.html;
        location / {
            proxy_set_header Host $host;
            proxy_pass http://#{(app _id:)};
            proxy_set_header X-Forwarded-For $remote_addr;
        }
    }
END)))))
     RESULTS)

(def locations-for-apps (apps)
     (set RESULTS "")
     (apps each:
           (do (app)
               (if (and (app path:) ((app path:) length) (((app deployment:) workers:) count))
                   (then (RESULTS << (+ "        # " (app name:) "\n"
                                        "        location /" (app path:) "/ {\n"
                                        "            proxy_set_header Host $host;\n"
                                        "            proxy_pass http://" (app _id:) ";\n"
                                        "            proxy_set_header X-Forwarded-For $remote_addr;\n"
                                        "        }\n"))))))
     RESULTS)

(def upstream-servers-for-apps (apps)
     (set RESULTS "")
     (apps each:
           (do (app)
               (if (((app deployment:) workers:) count)
                   (then (RESULTS << (+ "\n"
                                        "    # " (app name:) "\n"
                                        "    upstream " (app _id:) "{\n"
                                        ((((app deployment:) workers:) map:
                                          (do (worker)
                                              (+ "        server 127.0.0.1:" (worker port:) ";")))
                                         componentsJoinedByString:"\n")
                                        "\n    }"))))))
     RESULTS)

(def nginx-config-with-services (apps)
     (set config (NGINX-CONF apps))
     config)

(def nginx-conf-path ()
     "/etc/nginx/nginx.conf")

(def nginx-path ()
     "/usr/sbin/nginx")

(def restart-nginx ()
     (mongo-connect)
     ((NSFileManager defaultManager) removeItemAtPath:(nginx-conf-path) error:nil)
     (set apps (mongo findArray:nil inCollection:"control.apps"))
     ((nginx-config-with-services apps) writeToFile:(nginx-conf-path) atomically:YES)
     (system "#{(nginx-path)} -s reload -c #{(nginx-conf-path)} -p #{CONTROL_PATH}/nginx/"))

(def prime-nginx ()
     ((NSFileManager defaultManager) removeItemAtPath:(nginx-conf-path) error:nil)
     ((nginx-config-with-services (array)) writeToFile:(nginx-conf-path) atomically:YES)
     ;; control redirect
     ((&a href:(+ "/control") "OK, Continue")
      writeToFile:"#{CONTROL_PATH}/public/restart.html" atomically:NO))

;;
;; App management
;;

(def add-app (app)
     (mongo-connect)
     (mongo insertObject:app intoCollection:"control.apps"))

(def add-version (app appfile-name appfile-data)
     (set version ((AgentUUID new) stringValue))
     (mongo-connect)
     (mongo writeData:appfile-data
                named:version
         withMIMEType:"application/zip"
         inCollection:"appfiles"
           inDatabase:"control")
     (set version
          (dict version:version
               filename:appfile-name
             created_at:(NSDate date)))
     
     (set versions (or (app versions:) (array)))
     (versions addObject:version)
     (set update (dict versions:versions))
     (mongo updateObject:(dict $set:update)
            inCollection:"control.apps"
           withCondition:(dict _id:(app _id:))
       insertIfNecessary:NO
   updateMultipleEntries:NO)
     (puts "updating")
     (puts (update description))
     (puts "for app")
     (puts (app description))
     version)

(def get-busy-ports ()
     (mongo-connect)
     (set apps (mongo findArray:nil inCollection:"control.apps"))
     (set ports (NSMutableSet set))
     (apps each:
           (do (app)
               (((app deployment:) workers:) each:
                (do (worker) (ports addObject:(worker port:))))))
     ports)

(def get-next-available-port (busy-ports start)
     (set port (+ 1 start))
     (while (busy-ports containsObject:port)
            (set port (+ port 1)))
     port)

(def deploy-version (app version-name)
     (mongo-connect)
     (set versions (app versions:))
     (set versions (versions select:
                             (do (version) (eq (version version:) version-name))))
     (if (eq (versions count) 1)
         (then (set appfile-name ((versions 0) filename:))
               (set app-name (appfile-name stringByDeletingPathExtension))
               (puts (+ "deploying " version-name " with " appfile-name))
               (if (app deployment:) (halt-app-deployment app))
               (set busy-ports (get-busy-ports))
               (set port 9000)
               (set workers (array))
               (unless (set worker-count (app workers:))
                       (set worker-count 1))
               ((worker-count) times:
                (do (i)
                    (set container ((AgentUUID new) stringValue))
                    (set path (+ CONTROL_PATH "/workers/" container))
                    (puts "Creating directory at path " path)
                    (set result
                         ((NSFileManager defaultManager)
                          createDirectoryAtPath:path withIntermediateDirectories:YES
                          attributes:nil error:nil))
                    (puts (+ "result: " result))
                    
                    (set data
                         (mongo retrieveDataForGridFSFile:version-name
                                             inCollection:"appfiles"
                                               inDatabase:"control"))
                    (data writeToFile:(+ path "/" appfile-name) atomically:NO)
                    
                    (set command (+ "cd " path "; unzip " appfile-name))
                    (puts command)
                    (system command)
                    ((NSFileManager defaultManager) createDirectoryAtPath:(+ path "/var") withIntermediateDirectories:YES attributes:nil error:nil)
                    ("" writeToFile:(+ path "/var/stdout.log") atomically:NO)
                    ("" writeToFile:(+ path "/var/stderr.log") atomically:NO)
                    (set command (+ "chmod -R ugo+rX " path))
                    (puts command)
                    (system command)
                    (set command (+ "chown -R control " path "/var"))
                    (puts command)
                    (system command)
                    (set command (+ "chmod -R ug+w " path "/var"))
                    (puts command)
                    (system command)
                    
                    (set port (get-next-available-port busy-ports port))
                    (set upstart-config (generate-upstart-config container app-name port app))
                    (upstart-config writeToFile:(+ "/etc/init/agentio-worker-" port ".conf") atomically:NO)
                    (system (+ "/sbin/initctl start agentio-worker-" port))
                    (workers << (dict port:port host:"localhost" container:container))))
               
               (set deployment (dict version:version-name
                                        name:app-name
                                     workers:workers))
               (mongo updateObject:(dict $set:(dict deployment:deployment))
                      inCollection:"control.apps"
                     withCondition:(dict _id:(app _id:))
                 insertIfNecessary:NO
             updateMultipleEntries:NO)
               (restart-nginx)
               deployment)
         (else
              (puts (+ "unable to deploy; can't find " version-name))
              nil)))

(def redeploy ()
     (mongo-connect)
     (set apps (mongo findArray:nil inCollection:"control.apps"))
     (apps each:
           (do (app)
               (puts (app name:))
               (set deployment (app deployment:))
               (set version-name (deployment version:))
               (set appfile-name nil)
               (puts "version name: #{version-name}")
               ((app versions:) each:
                (do (version)
                    (if (eq version-name (version version:))
                        (set appfile-name (version filename:)))))
               (puts "appfile name: #{appfile-name}")
               (if appfile-name
                   (then ((deployment workers:) each:
                          (do (worker)
                              (puts "WORKER #{(worker description)}")
                              (set container (worker container:))
                              ;; create container directory
                              (set path (+ CONTROL_PATH "/workers/" container))
                              (puts "Creating directory at path " path)
                              (set result
                                   ((NSFileManager defaultManager)
                                    createDirectoryAtPath:path withIntermediateDirectories:YES
                                    attributes:nil error:nil))
                              (puts (+ "result: " result))
                              ;; write app zip file into container
                              (set data
                                   (mongo retrieveDataForGridFSFile:version-name
                                                       inCollection:"appfiles"
                                                         inDatabase:"control"))
                              (data writeToFile:(+ path "/" appfile-name) atomically:NO)
                              ;; unzip app
                              (set command (+ "cd " path "; unzip " appfile-name))
                              (puts command)
                              (system command)
                              ;; create support directories
                              ((NSFileManager defaultManager)
                               createDirectoryAtPath:(+ path "/var") withIntermediateDirectories:YES attributes:nil error:nil)
                              ("" writeToFile:(+ path "/var/stdout.log") atomically:NO)
                              ("" writeToFile:(+ path "/var/stderr.log") atomically:NO)
                              (set command (+ "chmod -R ugo+rX " path))
                              (puts command)
                              (system command)
                              (set command (+ "chown -R control " path "/var"))
                              (puts command)
                              (system command)
                              (set command (+ "chmod -R ug+w " path "/var"))
                              (puts command)
                              (system command)
                              (set port (worker port:))
                              
                              (set sandbox-sb (generate-sandbox-description container (app name:) port))
                              (sandbox-sb writeToFile:(+ CONTROL_PATH "/workers/" container "/sandbox.sb") atomically:NO)
                              
                              (set launchd-plist (generate-launchd-plist container (app name:) port))
                              (launchd-plist writeToFile:(+ "/Library/LaunchDaemons/net.control.app." port ".plist") atomically:NO)
                              (system (+ "launchctl load /Library/LaunchDaemons/net.control.app." port ".plist")))))
                   (else "version is unknown"))
               (puts ((app deployment:) description))
               ))
     (restart-nginx))

(def halt-app-deployment (app)
     (mongo-connect)
     ;; get deployment
     (set deployment (app deployment:))
     ;; stop workers
     ((deployment workers:) each:
      (do (worker)
          (set port (worker port:))
          (set upstart-config-name (+ "/etc/init/agentio-worker-" port ".conf"))
          (system (+ "/sbin/initctl stop agentio-worker-" port))
          ((NSFileManager defaultManager) removeItemAtPath:upstart-config-name error:nil)
          (if (set container (worker container:))
              ((NSFileManager defaultManager) removeItemAtPath:(+ CONTROL_PATH "/workers/" container)
               error:nil))))
     ;; remove deployment from database
     (mongo updateObject:(dict $unset:(dict deployment:1))
            inCollection:"control.apps"
           withCondition:(dict _id:(app _id:))
       insertIfNecessary:NO
   updateMultipleEntries:NO)
     (restart-nginx))

;;
;; mail user management
;;

;; create a mail user
(def add-mail-user (username)
     (set command "adduser --gecos \"\" --disabled-password #{username}")
     (system command)
     (set command "chsh #{username} -s /usr/sbin/nologin")
     (system command))

;; set a mail user's password to something random
(def set-mail-password (username)
     (set password ((AgentUUID new) stringValue))
     (puts password)
     (set command ("chpasswd << 'END'\n#{username}:#{password}\nEND\n"))
     (system command)
     password)

;; delete a mail user
(def delete-mail-user (username)
     (set command "deluser #{username}")
     (system command)
     (set command "rm -rf /home/#{username}")
     (system command))

;; helpers

(macro auth (*body) ;; the body should return a (dict)
       `(progn (RESPONSE setValue:"application/xml" forHTTPHeader:"Content-Type")
               (set authorization ((REQUEST headers) Authorization:))
               (set parts (authorization componentsSeparatedByString:" "))
               (case ((parts 0) lowercaseString)
                     ("basic" (set credentials
                                   (NSString stringWithData:(NSData agent_dataWithBase64EncodedString:(parts 1))
                                                   encoding:NSUTF8StringEncoding))
                              (set parts (credentials componentsSeparatedByString:":"))
                              (set username (parts 0))
                              (set password (parts 1))
                              (mongo-connect)
                              (set account
                                   (mongo findOne:(dict username:username
                                                        password:(password agent_md5HashWithSalt:PASSWORD_SALT))
                                     inCollection:"accounts.users")))
                     ("bearer" (set secret (parts 1))
                               (mongo-connect)
                               (set account (mongo findOne:(dict secret:secret)
                                              inCollection:"accounts.users")))
                     (else (set account nil)))
               (if account
                   (then (set response (progn ,@*body)))
                   (else (RESPONSE setStatus:401)
                         (set response (dict message:"Unauthorized"))))
               (response XMLPropertyListRepresentation)))

;; The CONTROL API

;; get account information for the authenticated user
(get "/control/user"
     (auth (account removeObjectForKey:"password")
           (account removeObjectForKey:"_id")
           (dict message:"OK" account:account)))

;; restart control
(post "/control/restart"
      (auth (RESPONSE setExit:1)
            (RESPONSE redirectResponseToLocation:"/restart.html")
            (dict message:"OK")))

;; get nginx configuration and status
(get "/control/nginx"
     (auth (dict message:"ok"
                    conf:(NSString stringWithContentsOfFile:(nginx-conf-path) encoding:NSUTF8StringEncoding error:nil))))

;; restart nginx
(post "/control/nginx/restart"
      (auth (restart-nginx)
            (dict message:"OK")))

;; get a list of apps
(get "/control/apps"
     (auth (mongo-connect)
           (set apps (mongo findArray:nil
                         inCollection:"control.apps"
                      returningFields:(dict _id:1 name:1)
                       numberToReturn:1000
                         numberToSkip:0))
           (dict message:"OK" apps:apps)))

;; get details for an individual app
(get "/control/apps/appid:"
     (auth (mongo-connect)
           (set app (mongo findOne:(dict _id:(oid appid)) inCollection:"control.apps"))
           (dict message:"OK" app:app)))

;; create an app
(post "/control/apps"
      (auth (set app ((REQUEST body) propertyListValue))
            (set appid ((add-app app) stringValue))
            (dict message:"OK" appid:appid)))

;; delete an app and all versions
(delete "/control/apps/appid:"
        (auth (mongo-connect)
              (set app (mongo findOne:(dict _id:(oid appid)) inCollection:"control.apps"))
              (unless app (return (dict message:"unknown app")))
              (halt-app-deployment app)
              (mongo removeWithCondition:(dict _id:(oid appid)) fromCollection:"control.apps")
              ((app versions:) each:
               (do (version)
                   (mongo removeFile:(version version:)
                        inCollection:"appfiles"
                          inDatabase:"control")))
              (dict message:"OK")))

;; add a version of an app
(post "/control/apps/appid:"
      (auth (mongo-connect)
            (set app (mongo findOne:(dict _id:(oid appid)) inCollection:"control.apps"))
            (unless app (return (dict message:"error: app #{appname} not found")))
            (if (and (set appfile-data (REQUEST body))
                     (appfile-data length)
                     (set appfile-name (+ (app name:) ".zip")))
                (then ;; save appfile
                      (set version (add-version app appfile-name appfile-data))
                      (dict message:"OK" version:(version version:)))
                (else (dict message:"error: invalid app data")))))

;; delete a version of an app
(delete "/control/apps/appid:/version:"
        (auth (mongo-connect)
              (set app (mongo findOne:(dict _id:(oid appid)) inCollection:"control.apps"))
              (unless app (return nil))
              (set versions (app versions:))
              (set versions (versions select:
                                      (do (v) (ne (v version:) version))))
              (set update (dict $set:(dict versions:versions)))
              (mongo updateObject:update
                     inCollection:"control.apps"
                    withCondition:(dict _id:(oid appid))
                insertIfNecessary:NO
            updateMultipleEntries:NO)
              (mongo removeFile:version
                   inCollection:"appfiles"
                     inDatabase:"control")
              (dict message:"OK")))

;; deploy an app version
(post "/control/apps/appid:/version:/deploy"
      (auth (mongo-connect)
            (set app (mongo findOne:(dict _id:(oid appid)) inCollection:"control.apps"))
            (unless app (return (dict message:"can't find app")))
            (if (deploy-version app version)
                (then (dict message:"OK"))
                (else (dict message:"error: unable to deploy app")))))

;; halt a running app
(post "/control/apps/appid:/stop"
      (auth (mongo-connect)
            (set app (mongo findOne:(dict _id:(oid appid)) inCollection:"control.apps"))
            (unless app (return nil))
            (halt-app-deployment app)
            (dict message:"OK")))

;; create a mail user
(post "/control/mail/users"
      (auth (mongo-connect)
            (if (set username ((REQUEST post) username:))
                (then (add-mail-user username)
                      (set password (set-mail-password username))
                      (mongo insertObject:(dict username:username password:password) intoCollection:"mail.users")
                      (dict message:"OK"))
                (else (dict message:"OK")))))

;; list mail users
(get "/control/mail/users"
     (auth (mongo-connect)
           (set users (mongo findArray:nil inCollection:"mail.users"))
           (dict message:"OK" users:users)))

;;
;; host configuration
;;

;; set the hostname
(post "/control/hostname"
      (auth (set hostname ((REQUEST post) hostname:))
            (hostname writeToFile:"/etc/hostname" atomically:YES)
            (dict message:"OK" hostname:hostname)))

;; get the hostname
(get "/control/hostname"
     (auth (set hostname (NSString stringWithContentsOfFile:"/etc/hostname"))
           (dict message:"OK" hostname:hostname)))

(AgentHTTPServer run)

